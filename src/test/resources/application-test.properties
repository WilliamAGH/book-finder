# Test Profile: Application Properties
# These properties are active when the 'test' Spring profile is used (e.g., during `mvn test`).
# They configure the application to use an H2 in-memory database, which is created and destroyed for each test run.
# This setup avoids reliance on an external PostgreSQL database for most unit and integration tests.

# H2 Datasource Configuration for Test Profile
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Database Schema Initialization for H2:
# - `ddl-auto=none`: Disables Hibernate's automatic schema generation (create, update, create-drop).
#   This is crucial because Hibernate might try to generate DDL incompatible with H2 for custom types (like 'vector').
# - `sql.init.mode=always`: Ensures Spring Boot always executes `src/test/resources/schema.sql` (and `data.sql` if present)
#   to set up the H2 database schema. This file contains H2-compatible DDL.
# - `defer-datasource-initialization=true`: Ensures that `schema.sql` is run before Hibernate attempts to validate
#   or use the schema, providing a well-defined schema for Hibernate to work against.

spring.jpa.hibernate.ddl-auto=none
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true

# Optional: Show SQL executed by Hibernate (can be verbose if uncommented)
# spring.jpa.show-sql=true

# Conditional Bean Configuration Notes (for reference):
# The application uses `@ConditionalOnExpression` for JpaCachedBookRepository and NoOpCachedBookRepository
# to switch between a real database repository and a no-op version based on whether `spring.datasource.url` is set.
# In this test profile, `spring.datasource.url` IS set (for H2), so JpaCachedBookRepository should be active,
# but its interaction with the DB is governed by the schema.sql and mocked in some tests.

# Ensure NoOpCachedBookRepository is NOT active when a datasource URL is present (which it is now for H2)
# The @ConditionalOnExpression on JpaCachedBookRepository ('${spring.datasource.url:}'.length() > 0)
# and NoOpCachedBookRepository ('${spring.datasource.url:}'.length() == 0) should handle this.

# If you have custom schema.sql or data.sql for tests in src/test/resources,
# they should be picked up automatically by Spring Boot for H2.