@startuml Book Recommendation Engine

' Define the package
package "com.williamcallahan.book_recommendation_engine" {
    ' Model classes
    package "model" {
        class Book {
            - id: String
            - title: String
            - authors: List<String>
            - description: String
            - coverImageUrl: String
            - imageUrl: String
            - isbn10: String
            - isbn13: String
            - publishedDate: Date
            - categories: List<String>
            - averageRating: Double
            - ratingsCount: Integer
            - rawRatingsData: String
            - hasRatings: Boolean
            - pageCount: Integer
            - language: String
            - publisher: String
            - infoLink: String
            - previewLink: String
            - purchaseLink: String
            - listPrice: Double
            - currencyCode: String
            - webReaderLink: String
            - coverImageWidth: Integer
            - coverImageHeight: Integer
            - isCoverHighResolution: Boolean
            - otherEditions: List<EditionInfo>
            + Book()
            + Book(id: String, title: String, authors: List<String>, description: String, coverImageUrl: String, imageUrl: String)
            + getters and setters
            + equals(o: Object): boolean
            + hashCode(): int
            + toString(): String
        }

        class "Book.EditionInfo" as EditionInfo {
            - googleBooksId: String
            - type: String
            - identifier: String
            - publishedDate: Date
            - coverImageUrl: String
            + EditionInfo()
            + EditionInfo(googleBooksId: String, type: String, identifier: String, publishedDate: Date, coverImageUrl: String)
            + getters and setters
        }

        class CachedBook {
            - id: String
            - googleBooksId: String
            - title: String
            - authors: List<String>
            - description: String
            - coverImageUrl: String
            - isbn10: String
            - isbn13: String
            - publishedDate: LocalDateTime
            - categories: List<String>
            - averageRating: BigDecimal
            - ratingsCount: Integer
            - pageCount: Integer
            - language: String
            - publisher: String
            - infoLink: String
            - previewLink: String
            - purchaseLink: String
            - embedding: float[]
            - rawData: JsonNode
            - createdAt: LocalDateTime
            - lastAccessed: LocalDateTime
            - accessCount: Integer
            + CachedBook()
            + {static} fromBook(book: Book, rawData: JsonNode, embedding: float[]): CachedBook
            + toBook(): Book
        }
    }

    ' Controller classes
    package "controller" {
        class BookController {
            - googleBooksService: GoogleBooksService
            - recentlyViewedService: RecentlyViewedService
            - recommendationService: RecommendationService
            - bookImageOrchestrationService: BookImageOrchestrationService
            + BookController(googleBooksService: GoogleBooksService, recentlyViewedService: RecentlyViewedService, recommendationService: RecommendationService, bookImageOrchestrationService: BookImageOrchestrationService)
            + searchBooks(query: String, startIndex: int, maxResults: int, coverSource: String, resolution: String): Mono<ResponseEntity<Map<String, Object>>>
            - getCoverImageSourceFromString(source: String): BookImageOrchestrationService.CoverImageSource
            - getImageResolutionPreferenceFromString(resolution: String): ImageResolutionPreference
            + searchBooksByTitle(title: String, coverSource: String, resolution: String): Mono<ResponseEntity<Map<String, Object>>>
            + searchBooksByAuthor(author: String, coverSource: String, resolution: String): Mono<ResponseEntity<Map<String, Object>>>
            + searchBooksByISBN(isbn: String, coverSource: String, resolution: String): Mono<ResponseEntity<Map<String, Object>>>
            + getBookById(id: String, coverSource: String, resolution: String): Mono<ResponseEntity<Book>>
            + handleValidationExceptions(ex: IllegalArgumentException): ResponseEntity<Map<String, String>>
            + getSimilarBooks(id: String, count: int, coverSource: String, resolution: String): Mono<ResponseEntity<Map<String, Object>>>
        }

        class BookCoverController {
            + BookCoverController()
        }

        class BookCoverPreferenceController {
            + BookCoverPreferenceController()
        }

        class ErrorDiagnosticsController {
            + ErrorDiagnosticsController()
        }

        class HomeController {
            + HomeController()
        }

        class ImageResolutionPreferenceController {
            + ImageResolutionPreferenceController()
        }
    }

    ' Repository classes
    package "repository" {
        interface CachedBookRepository {
            + findByGoogleBooksId(googleBooksId: String): Optional<CachedBook>
            + findByIsbn10(isbn10: String): Optional<CachedBook>
            + findByIsbn13(isbn13: String): Optional<CachedBook>
            + findSimilarBooksById(bookId: String, limit: int): List<CachedBook>
            + save(entity: S): S
            + saveAll(entities: Iterable<S>): Iterable<S>
            + findById(id: String): Optional<CachedBook>
            + existsById(id: String): boolean
            + findAll(): Iterable<CachedBook>
            + findAllById(ids: Iterable<String>): Iterable<CachedBook>
            + count(): long
            + deleteById(id: String): void
            + delete(entity: CachedBook): void
            + deleteAllById(ids: Iterable<? extends String>): void
            + deleteAll(entities: Iterable<? extends CachedBook>): void
            + deleteAll(): void
        }

        class JpaCachedBookRepository {
            + JpaCachedBookRepository()
        }

        class NoOpCachedBookRepository {
            + NoOpCachedBookRepository()
        }
    }

    ' Service classes
    package "service" {
        class GoogleBooksService {
            - webClient: WebClient
            - googleBooksApiUrl: String
            - googleBooksApiKey: String
            + GoogleBooksService(webClientBuilder: WebClient.Builder)
            + searchBooks(query: String, startIndex: int, orderBy: String): Mono<JsonNode>
            + searchBooksAsyncReactive(query: String): Mono<List<Book>>
            + searchBooksByTitle(title: String): Mono<List<Book>>
            + searchBooksByAuthor(author: String): Mono<List<Book>>
            + searchBooksByISBN(isbn: String): Mono<List<Book>>
            + getBookById(bookId: String): Mono<Book>
            - convertGroupToBook(item: JsonNode): Book
            - convertSingleItemToBook(item: JsonNode): Book
            - extractBookBaseInfo(item: JsonNode, book: Book): void
            - getAuthorsFromVolumeInfo(volumeInfo: JsonNode): List<String>
            - getGoogleCoverImageFromVolumeInfo(volumeInfo: JsonNode): String
            - enhanceGoogleCoverUrl(url: String, quality: String): String
            - setAdditionalFields(item: JsonNode, book: Book): void
            - setLinks(item: JsonNode, book: Book): void
            - parsePublishedDate(volumeInfo: JsonNode): Date
            - extractEditionInfoFromItem(identifier: JsonNode, otherEditions: List<Book.EditionInfo>): void
            + getSimilarBooks(book: Book): Mono<List<Book>>
        }

        class BookCacheService {
            + BookCacheService()
        }

        class RecentlyViewedService {
            + RecentlyViewedService()
        }

        class RecommendationService {
            + RecommendationService()
        }

        class S3StorageService {
            + S3StorageService()
        }

        package "image" {
            class BookImageOrchestrationService {
                + BookImageOrchestrationService()
                + getBestCoverUrlAsync(book: Book, preferredSource: CoverImageSource, resolutionPreference: ImageResolutionPreference): CompletableFuture<String>
            }

            enum CoverImageSource {
                ANY
                GOOGLE
                OPEN_LIBRARY
                AMAZON
            }
        }
    }

    ' Types
    package "types" {
        enum ImageResolutionPreference {
            ANY
            HIGH_ONLY
            HIGH_FIRST
            LOW_ONLY
        }
    }

    ' Relationships
    Book +-- EditionInfo
    CachedBook ..> Book : converts to/from
    BookController --> GoogleBooksService : uses
    BookController --> RecentlyViewedService : uses
    BookController --> RecommendationService : uses
    BookController --> BookImageOrchestrationService : uses
    BookController ..> ImageResolutionPreference : uses
    JpaCachedBookRepository ..|> CachedBookRepository : implements
    NoOpCachedBookRepository ..|> CachedBookRepository : implements
    BookCacheService --> CachedBookRepository : uses
    RecommendationService --> GoogleBooksService : uses
    BookImageOrchestrationService +-- CoverImageSource
}

@enduml