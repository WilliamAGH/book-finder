spring:
  main:
    allow-bean-definition-overriding: true
  profiles:
    default: prod # Default to prod if no other profile is active
  
  # Graceful shutdown configuration for connection pool resilience
  lifecycle:
    timeout-per-shutdown-phase: 30s # Allow 30 seconds for graceful shutdown
  task:
    execution:
      shutdown:
        await-termination: true
        await-termination-period: 25s # Wait for tasks to complete before shutdown
  
  mvc:
    async:
      request-timeout: 60000 # Set overall async request timeout to 60 seconds

  # Disable Spring Cloud compatibility verifier
  cloud:
    compatibility-verifier:
      enabled: false
  
  # Cache configuration - can be disabled with SPRING_CACHE_TYPE=none
  cache:
    type: ${SPRING_CACHE_TYPE:caffeine} # Defaulting to Caffeine for L1 in-memory cache
    cache-names: books,bookCovers,searchResults,bookRequests,searchRequests,bookSearchResults,nytBestsellersCurrent
    caffeine:
      spec: "maximumSize=1000,expireAfterWrite=240m,recordStats" # Default spec for all caches
  
  # Redis configuration - used by our custom JedisPooled configuration
  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      password: ${SPRING_REDIS_PASSWORD:#{null}}
      ssl:
        enabled: ${SPRING_REDIS_SSL:false}
      timeout: 10000
      jedis:
        pool:
          max-active: 16 # Aligned with RedisConfig.java
          max-idle: 8    # Aligned with RedisConfig.java
          min-idle: 2    # Aligned with RedisConfig.java
          max-wait: 5000 # Aligned with RedisConfig.java - 5 second timeout
          # Connection validation for resilience
          test-on-borrow: true
          test-on-return: true
          test-while-idle: true

  web:
    resources:
      chain:
        strategy:
          content:
            enabled: true
            paths: "/**"
      cache:
        cachecontrol:
          max-age: 365d # Cache versioned resources for 1 year
        # For unversioned resources, it can also set a shorter cache period
        # period: 7d 
        # use-cache-control-header: true # Ensure Cache-Control header is used

app:
  security:
    admin:
      password: ${APP_ADMIN_PASSWORD}
    user:
      password: ${APP_USER_PASSWORD}
    headers:
      content-security-policy:
        enabled: true
  cache:
    enabled: true
    book: # Corresponds to app.redis.cache.book.ttl
      ttl: 24h # Default TTL for book cache entries
    # Cache Warming configuration
    warming:
      enabled: false # Disabled to reduce Google API daily quota usage
      # cron: 0 0 3 * * ? # Default cron if enabled
      # rate-limit-per-minute: 3 # Default rate limit if enabled
      # max-books-per-run: 10 # Default max books if enabled
      # recently-viewed-days: 7 # Default days for recent views if enabled
  cover-cache:
    dir: book-covers # Directory name for serving cached cover images
  book:
    covers:
      cdn-domain: ${S3_CDN_URL:https://book-finder.sfo3.digitaloceanspaces.com}
      additional-domains: ${BOOK_COVERS_ADDITIONAL_DOMAINS:}
  clicky:
    enabled: ${CLICKY_ENABLED:true}
    site-id: ${CLICKY_SITE_ID:101484793}
    cache-duration-minutes: ${CLICKY_CACHE_DURATION_MINUTES:60}
  
  # Embedding service configuration
  embedding:
    service:
      enabled: ${EMBEDDING_SERVICE_ENABLED:false}
      url: ${EMBEDDING_SERVICE_URL:http://localhost:11434}
    provider: ${EMBEDDING_PROVIDER:local}  # Options: openai, local, ollama

# S3 configuration
s3:
  enabled: ${S3_ENABLED:true}
  access-key-id: ${S3_ACCESS_KEY_ID:}
  secret-access-key: ${S3_SECRET_ACCESS_KEY:}
  server-url: ${S3_SERVER_URL:}
  region: ${AWS_REGION:us-west-2}
  bucket-name: ${S3_BUCKET:}
  cdn-url: ${S3_CDN_URL:}
      
# Server configuration (common, can be overridden by application.properties or profiles)
server:
  port: ${SERVER_PORT:8080} # Default from YML, application.properties will override if SERVER_PORT is set
  compression:
    enabled: true
  
# Google Books API configuration
google:
  books:
    api:
      key: ${GOOGLE_BOOKS_API_KEY:}
      base-url: ${GOOGLE_BOOKS_API_BASE_URL:https://www.googleapis.com/books/v1}

# New York Times API configuration
nyt:
  api:
    base-url: ${NYT_API_BASE_URL:https://api.nytimes.com/svc/books/v3}
    key: ${NYT_API_KEY:}

# OpenLibrary API configuration
openlibrary:
  data:
    api:
      url: ${OPENLIBRARY_API_URL:https://openlibrary.org}

# Sitemap S3 configuration
sitemap:
  s3:
    accumulated-ids-key: sitemap/accumulated-book-ids.json

# Common Logging (can be overridden by profiles)
logging:
  level:
    root: INFO
    # Suppress noisy Redis connection logging during cleanup operations
    '[org.springframework.data.redis.core.RedisConnectionUtils]': WARN
    '[redis.clients.jedis]': WARN # Default root level
    '[com.williamcallahan.book_recommendation_engine]': INFO
    "[org.springframework.cache]": WARN
    "[org.hibernate]": WARN

---
spring:
  config:
    activate:
      on-profile: dev
  devtools:
    restart:
      enabled: true
    livereload:
      enabled: true
  # Dev-specific cache configuration
  cache:
    caffeine:
      spec: "maximumSize=1000,expireAfterWrite=240m,recordStats" # Dev cache settings
logging:
  level:
    '[org.springframework.boot.devtools]': WARN  # suppress DevTools internal logs
    "[org.springframework.web]": INFO # Changed from DEBUG
    "[org.springframework.data.redis]": DEBUG
    "[redis.clients.jedis]": DEBUG
app:
  environment:
    mode: development # Custom property for dev mode
  security:
    admin:
      password: ${APP_ADMIN_PASSWORD:devAdminPass}
    user:
      password: ${APP_USER_PASSWORD:devUserPass}

---
spring:
  config:
    activate:
      on-profile: prod
  # Production-specific cache configuration with optimized settings
  cache:
    cache-names: books,bookSearchResults,nytBestsellersCurrent
    caffeine:
      spec: "maximumSize=2000,expireAfterWrite=12h,recordStats" # Optimized for production
logging:
  level:
    "[com.williamcallahan.book_recommendation_engine]": INFO # Standard INFO level for prod
app:
  environment:
    mode: production # Custom property for prod mode

---
spring:
  config:
    activate:
      on-profile: test
  cache:
    type: simple
logging:
  level:
    root: WARN
    "[com.williamcallahan.book_recommendation_engine]": INFO
    "[org.springframework]": WARN
s3:
  cdn-url: https://book-finder.sfo3.digitaloceanspaces.com
app:
  cache:
    enabled: true

---
spring:
  config:
    activate:
      on-profile: jsontoredis
  main:
    web-application-type: none
  data:
    redis:
      timeout: 20000
  devtools:
    restart:
      enabled: false

# JSON to Redis migration configuration
jsontoredis:
  s3:
    google-books-prefix: ${JSONTOREDIS_S3_GOOGLE_BOOKS_PREFIX:books/v1/}
    nyt-bestsellers-key: ${JSONTOREDIS_S3_NYT_BESTSELLERS_KEY:nyt-bestsellers/current.json}

logging:
  level:
    '[com.williamcallahan.book_recommendation_engine.jsontoredis]': INFO
