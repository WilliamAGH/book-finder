# =============================================================================
# PRODUCTION-SAFE DEFAULTS
# =============================================================================
# This configuration contains secure defaults suitable for production.
# Dev/test profiles override these settings for development convenience.
# If no profile is set, these production-safe defaults apply (default: prod).
# =============================================================================

spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL:}
    username: ${SPRING_DATASOURCE_USERNAME:}
    password: ${SPRING_DATASOURCE_PASSWORD:}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 2000
      validation-timeout: 1000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  main:
    allow-bean-definition-overriding: true
  
  jpa:
    hibernate:
      ddl-auto: validate # PRODUCTION-SAFE: Only validate schema, never auto-create/update
    show-sql: false # PRODUCTION-SAFE: No SQL logging (security/performance)
  
  sql:
    init:
      mode: never # PRODUCTION-SAFE: Schema initialization disabled to prevent data loss
  
  profiles:
    default: prod # PRODUCTION-SAFE: Default to prod if no profile is explicitly set
  
  # Cache configuration - can be disabled with SPRING_CACHE_TYPE=none
  cache:
    type: ${SPRING_CACHE_TYPE:caffeine} # Defaulting to Caffeine for L1 in-memory cache
    cache-names: books,bookCovers,searchResults,bookRequests,searchRequests,bookSearchResults,nytBestsellersCurrent
    caffeine:
      spec: "maximumSize=1000,expireAfterWrite=240m,recordStats" # Default spec for all caches
  

  web:
    resources:
      chain:
        strategy:
          content:
            enabled: true
            paths: "/**"
      cache:
        cachecontrol:
          max-age: 365d # Cache versioned resources for 1 year
        # For unversioned resources, it can also set a shorter cache period
        # period: 7d 
        # use-cache-control-header: true # Ensure Cache-Control header is used

  codec: # Correctly nested under spring
    max-in-memory-size: 10MB # Configure global max buffer size for WebClient

app:
  features:
    external-fallback:
      enabled: ${APP_FEATURE_EXTERNAL_FALLBACK_ENABLED:true}
    google-fallback:
      enabled: ${APP_FEATURE_GOOGLE_FALLBACK_ENABLED:true}
  security:
    admin:
      password: ${APP_ADMIN_PASSWORD}
    user:
      password: ${APP_USER_PASSWORD}
    headers:
      content-security-policy:
        enabled: true
  cache:
    enabled: true
    book: # Corresponds to app.redis.cache.book.ttl
      ttl: 24h # Default TTL for book cache entries
  cover-cache:
    dir: book-covers # Directory name for serving cached cover images
  book:
    covers:
      cdn-domain: ${S3_CDN_URL:https://book-finder.sfo3.digitaloceanspaces.com}
      additional-domains: ${BOOK_COVERS_ADDITIONAL_DOMAINS:}
  clicky:
    enabled: ${CLICKY_ENABLED:true}
    site-id: ${CLICKY_SITE_ID:101484793}
  
  # External embedding service URL (optional)
  # If not provided, a simple placeholder embedding will be used
  embedding:
    service:
      url: ${EMBEDDING_SERVICE_URL:}

# S3 configuration
s3:
  enabled: ${S3_ENABLED:false}
  access-key-id: ${S3_ACCESS_KEY_ID:}
  secret-access-key: ${S3_SECRET_ACCESS_KEY:}
  server-url: ${S3_SERVER_URL:}
  region: ${AWS_REGION:us-west-2}
  bucket-name: ${S3_BUCKET:}
  cdn-url: ${S3_CDN_URL:}
      
# Server configuration (common, can be overridden by application.properties or profiles)
server:
  port: ${SERVER_PORT:8095} # Default from YML, application.properties will override if SERVER_PORT is set
  compression:
    enabled: true
  
# Google Books API configuration
google:
  books:
    api:
      key: ${GOOGLE_BOOKS_API_KEY:}
      base-url: ${GOOGLE_BOOKS_API_BASE_URL:https://www.googleapis.com/books/v1}

# New York Times API configuration
nyt:
  api:
    base-url: ${NYT_API_BASE_URL:https://api.nytimes.com/svc/books/v3}
    key: ${NYT_API_KEY:}

# OpenLibrary API configuration
openlibrary:
  data:
    api:
      url: ${OPENLIBRARY_API_URL:https://openlibrary.org}

# Sitemap configuration
sitemap:
  base-url: ${SITEMAP_BASE_URL:https://findmybook.net}
  html-page-size: 100
  xml-page-size: 5000

# Affiliate link configuration
affiliate:
  amazon:
    associate-tag: ${AMAZON_ASSOCIATE_TAG:williamagh-20}
  barnesandnoble:
    publisher-id: ${BARNES_NOBLE_PUBLISHER_ID:}
    website-id: ${BARNES_NOBLE_WEBSITE_ID:}
  bookshop:
    affiliate-id: ${BOOKSHOP_AFFILIATE_ID:113888}

# Common Logging - Production-safe defaults (minimal verbosity)
logging:
  level:
    root: INFO # PRODUCTION-SAFE: Standard INFO level
    "[com.williamcallahan.book_recommendation_engine]": INFO
    "[org.springframework.cache]": WARN
    "[org.hibernate]": WARN
    "[org.springframework.web]": WARN # PRODUCTION-SAFE: Minimal web logging

# =============================================================================
# DEVELOPMENT PROFILE - Permissive settings for local development
# =============================================================================
---
spring:
  config:
    activate:
      on-profile: dev
  
  devtools:
    restart:
      enabled: true
    livereload:
      enabled: true
  
  jpa:
    show-sql: true # DEV OVERRIDE: Show SQL for debugging
    hibernate:
      ddl-auto: validate # Still validate only, never auto-create
  
  # Dev-specific cache configuration
  cache:
    caffeine:
      spec: "maximumSize=1000,expireAfterWrite=240m,recordStats" # Dev cache settings

logging:
  level:
    '[org.springframework.boot.devtools]': WARN
    "[org.springframework.web]": INFO # DEV OVERRIDE: More verbose web logging
    "[com.williamcallahan.book_recommendation_engine]": DEBUG # DEV OVERRIDE: Debug app logging

app:
  environment:
    mode: development
  features:
    external-fallback:
      enabled: true # DEV: Enable fallbacks for testing tiered search
  security:
    admin:
      password: ${APP_ADMIN_PASSWORD:devAdminPass}
    user:
      password: ${APP_USER_PASSWORD:devUserPass}

# =============================================================================
# PRODUCTION PROFILE - Minimal overrides (base config is already prod-safe)
# =============================================================================
---
spring:
  config:
    activate:
      on-profile: prod
  
  # Production-specific cache configuration with optimized settings
  cache:
    cache-names: books,bookSearchResults,nytBestsellersCurrent
    caffeine:
      spec: "maximumSize=2000,expireAfterWrite=12h,recordStats" # Optimized for production load

logging:
  level:
    "[com.williamcallahan.book_recommendation_engine]": INFO

app:
  environment:
    mode: production

# =============================================================================
# TEST PROFILE - Simplified settings for automated testing
# =============================================================================
---
spring:
  config:
    activate:
      on-profile: test
  
  jpa:
    show-sql: false # TEST: Keep SQL logging off for cleaner test output
  
  cache:
    type: simple # TEST: Use simple in-memory cache for testing

logging:
  level:
    root: WARN
    "[com.williamcallahan.book_recommendation_engine]": INFO
    "[org.springframework]": WARN

s3:
  cdn-url: https://book-finder.sfo3.digitaloceanspaces.com

app:
  cache:
    enabled: true
  environment:
    mode: test
