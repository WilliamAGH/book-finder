spring.application.name=book_recommendation_engine

# Server configuration
server.port=${SERVER_PORT:8081}
# SSL configuration disabled - will be handled at proxy level in production
#server.ssl.key-store=classpath:keystore/bookrecommendation.p12
#server.ssl.key-store-password=password
#server.ssl.key-store-type=PKCS12
#server.ssl.key-alias=bookrecommendation
#server.ssl.enabled=true

# Database configuration
# spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/book_recommendation}
# spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
# spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}

# OpenAI configuration
spring.ai.openai.api-key=${SPRING_AI_OPENAI_API_KEY:}
spring.ai.openai.model=${SPRING_AI_OPENAI_MODEL:gpt-4}
spring.ai.openai.audio.speech.enabled=false

# Exclude all OpenAI auto-configurations (Chat, Embedding, Image, Moderation) when no API key is set
spring.autoconfigure.exclude=org.springframework.ai.model.openai.autoconfigure.OpenAiChatAutoConfiguration,org.springframework.ai.model.openai.autoconfigure.OpenAiEmbeddingAutoConfiguration,org.springframework.ai.model.openai.autoconfigure.OpenAiImageAutoConfiguration,org.springframework.ai.model.openai.autoconfigure.OpenAiModerationAutoConfiguration

# Google Books API configuration
googlebooks.api.url=https://www.googleapis.com/books/v1
googlebooks.api.key=${GOOGLE_BOOKS_API_KEY:}
google.books.api.max-results=40
google.books.api.connect-timeout=5000
google.books.api.read-timeout=5000

# Logging configuration
logging.level.root=INFO
logging.level.com.williamcallahan=DEBUG

# S3 Compatible Storage configuration
s3.access-key-id=${S3_ACCESS_KEY_ID}
s3.secret-access-key=${S3_SECRET_ACCESS_KEY}
s3.region=${AWS_REGION:us-east-1}
s3.bucket-name=${S3_BUCKET_NAME:book-finder}
s3.cdn-url=${S3_CDN_URL}
s3.public-cdn-url=${S3_PUBLIC_CDN_URL:#{null}}
s3.server-url=${S3_SERVER_URL:https://sfo3.digitaloceanspaces.com}
s3.enabled=${S3_ENABLED:true}

# Sitemap configuration
sitemap.s3.accumulated-ids-key=${SITEMAP_S3_ACCUMULATED_IDS_KEY:sitemap/accumulated-book-ids.json}

# Book cover cache configuration
app.cover-cache.enabled=true
app.cover-cache.dir=covers
app.cover-cache.max-age-days=30
app.cover-cache.cleanup-interval-hours=24
# Maximum file size in bytes for cached cover images.
# Default is 5MB (5 * 1024 * 1024 = 5242880 bytes).
app.cover-cache.max-file-size-bytes=5242880

# Book cover debug mode
# When true, logs detailed JSON information about cover image sources to S3 alongside the image
book.cover.debug-mode=true

# Increase async request timeout for deferred results
spring.mvc.async.request-timeout=60s

# Tune Tomcat connection and thread settings
server.connection-timeout=60s
server.tomcat.max-threads=200
server.tomcat.min-spare-threads=20
server.tomcat.accept-count=100

# SMTP Configuration for later
# spring.mail.host=smtp.example.com

# Resilience4j Circuit Breaker Configuration
resilience4j.circuitbreaker.instances.googleBooksService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.googleBooksService.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.googleBooksService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.googleBooksService.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.googleBooksService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.googleBooksService.waitDurationInOpenState=30s
resilience4j.circuitbreaker.instances.googleBooksService.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.googleBooksService.automaticTransitionFromOpenToHalfOpenEnabled=true

resilience4j.circuitbreaker.instances.openLibraryService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.openLibraryService.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.openLibraryService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.openLibraryService.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.openLibraryService.failureRateThreshold=60 
resilience4j.circuitbreaker.instances.openLibraryService.waitDurationInOpenState=60s
resilience4j.circuitbreaker.instances.openLibraryService.permittedNumberOfCallsInHalfOpenState=2

resilience4j.circuitbreaker.instances.longitoodService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.longitoodService.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.longitoodService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.longitoodService.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.longitoodService.failureRateThreshold=70
resilience4j.circuitbreaker.instances.longitoodService.waitDurationInOpenState=60s
resilience4j.circuitbreaker.instances.longitoodService.permittedNumberOfCallsInHalfOpenState=2

# Default TimeLimiter configuration (can be overridden per instance)
resilience4j.timelimiter.instances.defaultConfig.timeoutDuration=5s
resilience4j.timelimiter.instances.defaultConfig.cancelRunningFuture=true

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=when_authorized
# Show circuit breaker states in health endpoint
management.health.circuitbreakers.enabled=true
# Show DB health (if spring-boot-starter-data-jpa is present)
management.health.db.enabled=true
# Show disk space health
management.health.diskspace.enabled=true

# Test Book ID for health check
healthcheck.test-book-id=Hn41AgAAQBAJ # Example Book ID, replace with a stable ID from your system

# Disable default Redis health indicator to use the custom resilient one
management.health.redis.enabled=false
